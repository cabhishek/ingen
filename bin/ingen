#!/usr/bin/env node

var fs = require('fs-extra')
var path = require('path')
var program = require('commander')
var camelCase = require('change-case').camelCase

var basePath = path.normalize(__dirname + path.sep + '..')
var pkg = fs.readJSONSync(path.join(basePath, 'package.json'))
var Site = require('../lib/site')
var config = require('../lib/config')

// to store all set options
var options = {}

program
  .version(pkg.version)
  .usage('[command] [options]')
  .option('-s, --source <dir>', 'set the source directory (defaults to "./)', './')
  .option('-d, --destination <dir>', 'set the destination directory (defaults to "./_site")', './_site')
  .option('-e, --env <value>', 'set the environment (defaults to "production")', 'production')
  .option('-p, --port <number>', 'set the port to listen on (defaults to 4000)', 4000)
  .option('-w, --watch', 'watch for change and rebuild the site')
  .option('-i, --include-drafts', 'ignore posts with a draft value of `true`')

program
  .command('build')
  .description('Build the site')
  .action(function() {
    config.init(options)
    var site = new Site(config)
    site.build()
  })

program
  .command('serve')
  .description('Serve the site locally')
  .action(function() {
    config.init(options)
    var site = new Site(config)
    site.serve()
  })

// list for all options and add them to the options hash
program.options.forEach(function(option) {
  var option = option.long.slice(2)
  program.on(option, function(value) {
    // options with no value are assumed to be boolean
    // and if they're set they're assumed to be true
    options[camelCase(option)] = value || true
  });
})

program.parse(process.argv)

// default to showing --help
if (program.rawArgs.length < 3) program.help()
